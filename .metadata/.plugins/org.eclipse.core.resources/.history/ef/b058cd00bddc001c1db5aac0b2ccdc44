package com.example.onlineApiTest;

import java.io.IOException;
import java.text.ParseException;

//import java.util.logging.Logger;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;
import org.testng.Assert;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;
import org.testng.log4testng.Logger;

//import bsh.ParseException;
//import net.minidev.json.parser.JSONParser;

public class TestNg {
	 private String responseBody;
	    public String responseBodyPOST;
	    final static Logger logger = Logger.getLogger(TestNg.class);
	    //RESTTemplate Object
	    private RestTemplate restTemplate;
	     
	    //Employee ID 
	    private String employeeId;
	    // Create Response Entity - Stores HTTPStatus Code, Response Body, etc
	    private ResponseEntity<String> response;
	   
	    @BeforeTest
	    void beforeTest() throws IOException, ParseException {
	        logger.info("Setting up prerequisite for test execution");
	        logger.info("Creating RestTemplate object before tests");
	        this.restTemplate = new RestTemplate(); 
	    }
	
	@Test
	public void addEmployee() throws IOException, ParseException {
	        String addURI = "http://dummy.restapiexample.com/api/v1/create";
	        HttpHeaders headers = new HttpHeaders();        
	        headers.add("Accept", "application/json");
	        headers.add("Content-Type", "application/json");
	          
	        logger.info("Add URL :"+addURI);
	        String jsonBody = "{\"name\":\"zozo100\",\"salary\":\"123\",\"age\":\"23\"}";
	        System.out.println("\n\n" + jsonBody);
	      //  HttpEntity&lt;String&gt; entity = new HttpEntity&lt;String&gt;(jsonBody, headers);
	        HttpEntity<String> entity = new HttpEntity<String>(jsonBody, headers);
	         
	        //POST Method to Add New Employee
	        response = this.restTemplate.postForEntity(addURI, entity, String.class);
	        responseBodyPOST = response.getBody();
	        // Write response to file
	        responseBody = response.getBody().toString();
	        System.out.println("responseBody :" + responseBody);
	        // Get ID from the Response object
	        employeeId = getEmpIdFromResponse(responseBody);
	        System.out.println("empId is :" + employeeId);
	        // Check if the added Employee is present in the response body.
	        Assert.assertTrue(responseBody.contains(employeeId));
	        // System.out.println(propertyFile.get("EmployeeAddResBody"));
	        // Check if the status code is 201
	        Assert.assertEquals(response.getStatusCode(), HttpStatus.OK);
	        logger.info("Employee is Added successfully employeeId:"+employeeId);
		
		
	}

	private String getEmpIdFromResponse(String json) {
		JSONParser parser = new JSONParser();
        JSONObject jsonResponseObject = new JSONObject();
        Object obj = new Object();
        try {
            obj = parser.parse(json);
        } catch (org.json.simple.parser.ParseException e) {
            e.printStackTrace();
        }
        jsonResponseObject = (JSONObject) obj;
        String id = jsonResponseObject.get("id").toString();
        return id;
	}
}
